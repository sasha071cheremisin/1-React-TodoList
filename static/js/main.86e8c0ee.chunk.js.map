{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/app-info-panel/index.js","components/app-info-panel/app-info-panel.js","components/app-add-item/index.js","components/app-add-item/app-add-item.js","components/app-todo-item/index.js","components/app-todo-item/app-todo-item.js","components/app-todo-list/index.js","components/app-todo-list/app-todo-list.js","components/app/index.js","components/app/app.js","serviceWorker.js","index.js"],"names":["AppHeader","_ref","moreToDo","doneItems","react_default","a","createElement","className","AppInfoPanel","state","searchTerm","buttons","name","label","searchChange","e","target","value","_this","setState","props","_this$props","this","changeFilter","filterTerm","buttonsList","map","el","btnClassName","type","concat","onClick","key","placeholder","onChange","Component","AppAddItem","addItemLabel","changeInputAdd","submitForm","preventDefault","addItem","onSubmit","AppTodoItem","important","done","replacePropsItem","deleteItem","classLabel","AppTodoList","todoData","todoDataList","components_app_todo_item","id","prop","App","idCount","term","idx","findIndex","Object","toConsumableArray","slice","_ref2","_ref3","oldItem","newItem","objectSpread","defineProperty","items","filter","toLowerCase","indexOf","_this$state","doneItemCount","length","notDoneItemCount","visibleItems","searchItems","components_app_header","components_app_info_panel","components_app_todo_list","components_app_add_item","Boolean","window","location","hostname","match","ReactDOM","render","components_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86e8c0ee.chunk.js","sourcesContent":["import AppHeader from './app-header';\n\nexport default AppHeader;","import React from 'react';\nimport './app-header.scss';\n\nconst AppHeader = ({moreToDo,doneItems}) => {\n    \n    return (\n        <div className='app-header'>\n            <div className='app-header__title'>Todo list</div>\n            <div className='app-header__info'>{moreToDo} more to do, {doneItems} done</div>\n        </div>\n    );\n}\n\nexport default AppHeader;","import AppInfoPanel from './app-info-panel';\n\nexport default AppInfoPanel;","import React, {Component} from 'react';\nimport './app-info-panel.scss';\n\nexport default class AppInfoPanel extends Component {\n\n    state = {\n        searchTerm: '',\n    }\n\n    buttons = [\n        {name: 'all', label: 'All'},\n        {name: 'active', label: 'Active'},\n        {name: 'done', label: 'Done'},\n    ];\n\n    searchChange = (e) => {\n        const searchTerm = e.target.value;\n\n        this.setState({\n            searchTerm\n        });\n\n        this.props.searchChange(searchTerm);\n    }\n\n    render() {\n        const {changeFilter,filterTerm} = this.props;\n        const buttonsList = this.buttons.map((el) => {\n            const activeBtn = el.name === filterTerm;\n            const btnClassName = activeBtn? 'btn-primary' : 'btn-secondary';\n            return (\n                <button \n                    type=\"button\" \n                    className={`btn ${btnClassName}`}\n                    onClick={()=>changeFilter(el.name)}\n                    key={el.name}>\n                        {el.label}\n                </button>\n            )\n        });\n\n        return (\n            <div className='app-info-panel'>\n                <input \n                    className='app-info-panel__search form-control' \n                    type=\"text\" name=\"\" \n                    placeholder=\"type to serach\"\n                    onChange={this.searchChange}\n                    value={this.state.searchTerm}/>\n                <div className=\"app-info-panel__buttons-list btn-group\">\n                    {buttonsList}\n                </div>\n            </div>\n        );\n    }\n}","import AppAddItem from './app-add-item';\n\nexport default AppAddItem;","import React, {Component} from 'react';\nimport './app-add-item.scss';\n\nexport default class AppAddItem extends Component {\n    \n    state = {\n        addItemLabel: ''\n    }\n\n    changeInputAdd = (e) => {\n        this.setState({\n            addItemLabel: e.target.value\n        })\n    }\n\n    submitForm = (e) => {\n        e.preventDefault();\n        if(this.state.addItemLabel === '') return;\n        this.props.addItem(this.state.addItemLabel);\n        this.setState({addItemLabel: ''});\n    }\n\n    render() {\n        return (\n            <form className='app-add-item' onSubmit={this.submitForm}>\n                <input \n                    className='app-add-item__input form-control' \n                    type=\"text\" name=\"\" \n                    placeholder=\"What needs to be done\"\n                    value={this.state.addItemLabel}\n                    onChange={this.changeInputAdd}/>\n                <button \n                    type=\"submit\" \n                    className=\"app-add-item__button btn btn-outline-success\"\n                >\n                    Add item\n                </button>\n            </form>\n        );\n    }\n}","import AppTodoItem from './app-todo-item';\n\nexport default AppTodoItem;","import React from 'react';\nimport './app-todo-item.scss';\n\nconst AppTodoItem = ( { label,important,done,replacePropsItem,deleteItem } ) => {\n\n    let classLabel = '';\n\n    if(important) {\n        classLabel += ' app-todo-item__label--important';\n    } \n    \n    if(done) {\n        classLabel += ' app-todo-item__label--done';\n    }\n\n    return (\n        <div className=\"app-todo-item list-group-item\">\n                <span \n                    className={`app-todo-item__label ${classLabel}`} \n                    onClick={() => replacePropsItem('done')}>\n                    { label }\n                </span>\n                <div className='app-todo-item__buttons-list'>\n                    <div \n                        className=\"app-todo-item__button app-todo-item__button--trash fa fa-trash-o\"\n                        onClick={() => deleteItem()}>\n                    </div>\n                    <div \n                        className=\"app-todo-item__button app-todo-item__button--exclamation fa fa-exclamation\"\n                        onClick={() => replacePropsItem('important')}>\n                    </div>\n                </div>\n        </div>\n    );\n}\n\nexport default AppTodoItem;","import AppTodoList from './app-todo-list';\n\nexport default AppTodoList;","import React from 'react';\nimport './app-todo-list.scss';\nimport AppTodoItem from '../app-todo-item';\n\nconst AppTodoList = ({todoData,replacePropsItem,deleteItem}) => {\n\n    const todoDataList = todoData.map((el) => {\n        return (\n            <AppTodoItem \n                label={el.label} \n                key={el.id} \n                done={el.done} \n                important={el.important} \n                replacePropsItem={(prop)=>replacePropsItem(prop, el.id)}\n                deleteItem={() => deleteItem(el.id)}\n            />\n        )\n    });\n\n    return (\n        <div className='app-todo-list list-group'>\n            { todoDataList }\n        </div>\n    );\n}\n\nexport default AppTodoList;","import App from './app';\n\nexport default App;","import React, { Component } from 'react';\n\nimport AppHeader from '../app-header';\nimport AppInfoPanel from '../app-info-panel';\nimport AppAddItem from '../app-add-item';\nimport AppTodoList from '../app-todo-list';\nimport './app.scss';\n\nexport default class App extends Component {\n\n    idCount = 100;\n\n    state = {\n        todoData: [\n            {\n                label: 'Drink coffee',\n                important: false,\n                done: true,\n                id: 1\n            },\n            {\n                label: 'Learn React',\n                important: true,\n                done: false,\n                id: 2\n            },\n            {\n                label: 'Learn Redux',\n                important: false,\n                done: false,\n                id: 3\n            },\n        ],\n        searchTerm: '',\n        filterTerm: 'all'\n    }\n\n    searchChange = (term) => {\n        this.setState({\n            searchTerm: term\n        });\n    }\n\n    searchItems (items, term) {\n        if(term === '') return items;\n\n        return items.filter((el) => el.label.toLowerCase().indexOf(term.toLowerCase()) > -1);\n    }\n\n    filter (items,filterTerm) {\n        switch (filterTerm) {\n            case 'all':\n                return items;\n            case 'active':\n                return items.filter((el) => el.done === false);\n            case 'done':\n                return items.filter((el) => el.done === true);\n            default:\n                break;\n        }\n    }\n\n    changeFilter = (filterTerm) => {\n        this.setState({filterTerm});\n    }\n\n    deleteItem = (id) => {\n        this.setState(({ todoData }) => {\n            const idx = todoData.findIndex((el) => el.id === id);\n            const newArray = [\n                ...todoData.slice(0,idx),\n                ...todoData.slice(idx+1),\n            ];\n\n            return {\n                todoData: newArray\n            }\n        });\n    }\n\n    addItem = (label) => {\n        this.setState(({ todoData }) => {\n            \n            const newArray = [\n                ...todoData,\n                {\n                    label: label,\n                    important: false,\n                    done: false,\n                    id: this.idCount++\n                },\n            ];\n\n            return {\n                todoData: newArray\n            }\n        });\n    }\n\n    replacePropsItem = (prop,id) => {\n        this.setState(({ todoData }) => {\n            const idx = todoData.findIndex((el) => el.id === id);\n            const oldItem = todoData[idx];\n            const newItem = {...oldItem, [prop]: !oldItem[prop]}\n            const newArray = [\n                ...todoData.slice(0,idx),\n                newItem,\n                ...todoData.slice(idx+1),\n            ];\n            return {\n                todoData: newArray\n            }\n        });\n    }\n\n    render() {\n        const {todoData,searchTerm,filterTerm} = this.state;\n\n        const doneItemCount = this.state.todoData.filter((el) => el.done === true).length;\n        const notDoneItemCount = this.state.todoData.length - doneItemCount;\n        \n        const visibleItems = this.filter(this.searchItems(todoData,searchTerm), filterTerm);\n\n        return (\n            <div className=\"app\">\n                <AppHeader \n                    moreToDo={notDoneItemCount} \n                    doneItems={doneItemCount}/>\n                <AppInfoPanel \n                    searchChange={this.searchChange}\n                    changeFilter={this.changeFilter}\n                    filterTerm={filterTerm}/>\n                <AppTodoList \n                    todoData={visibleItems} \n                    replacePropsItem={this.replacePropsItem}\n                    deleteItem={this.deleteItem}/>\n                <AppAddItem \n                    addItem={this.addItem}/>\n            </div>\n        )\n    };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}